class UsersController < ApplicationController
  
def new
end
  
def create
    @user = User.new(params[:user])
    if @user.valid? 
        @user.save  
        UserMailer.welcome_email(@user).deliver
        link= "<a href=http://www.wiscmail.wisc.edu> Wiscmail </a>"   
        flash[:success]= "This account is not yet active, check your #{link}".html_safe
        flash[:success]= "Your account has been made! Go check your #{link}!".html_safe
        redirect_to home_url
    else 
        flash[:failure] = "Account is invalid"
        redirect_to home_url
    end
end
  
def show
    @user = User.find(params[:id])
end

def update
    @user = User.find(params[:id])
    @user.update_attributes(params[:user]) 
    sign_in(@user)
    redirect_to home_url
end 

def prof_update
   @user = User.find(params[:id])
   if @user.update_attributes(params[:user])
      @valid = true
   else
      @valid = false 
   end
  
  sign_in(@user)
    respond_to do |format|
     format.js{}
    end
end 
 
def index
 
    @user_id = params[:user_id] 

    if params[:video] != nil
       @current_video = Video.find_by_yt_video_id(params[:video])
       if params[:l] != true  		# if leaderboard value 
       params[:u] == true ? @user_id = @current_video.user_id : @user_id = nil
       else 
       @lbsave = true            #set leaderboard flag to true 
       @user_id = nil 
       end 
    end

    if @user_id == nil   # display top videos in scroll
       if @lbsave != true 
       @video_list = Video.where("yt_video_id is not null").order("points DESC").limit(15)
       @myVid = false
       @bank = "Top Videos"
       else 
       @video_list = @current_video.leaderboard.videos.order("points DESC")
       @bank = "#{@current_video.leaderboard.leaderboard_name}'s Videos " 
       end 
    else
       @user = User.find(@user_id) # display video bank in scroll
       @myVid = true 
       @video_list = @user.videos 
       @bank = "#{@user.name}'s Videos"
    end 

   
   @category = params[:category] 
   @leaderboard = params[:leaderboard]
 
   # sets default leaderboard list to all leaderboards 
   @leaderboard_list = Leaderboard.all.collect{|l| [l.leaderboard_name]}
   @leaderboard_list.unshift(["All Leaderboards"]) 
     
   # if leaderboard parameter is passed leaderboard_list doesnt need to be filled, simply just have to render appropriate videos for that leaderboard 
    if @leaderboard  != nil && @leaderboard != "" 
       @fill = "false"
       if @leaderboard == "All Leaderboards" # if "All Leaderboards" is selected, we need all the videos for current category
          @cat = Category.find_by_category_name(@category)
          # if the category is nil "All Categories" must be selected, therefore we render the videos with highest points overall, otherwise we get the ranked videos from respective category
	  @cat == nil ? @videos = Video.order("points DESC").limit(15) : @videos = @cat.videos.order("points DESC") 
       # if a specific leaderboard is chosen, simply get the videos, ordered by points, for that leaderboard
       else 
          @obj = Leaderboard.find_by_leaderboard_name(@leaderboard)
          @description = @obj.leaderboard_description 
          @videos = Video.find_in_lb(@obj.id).order("points DESC")
       end
    # if leaderboard parameter isn't sent, check to see if a category was selected
    elsif @category != nil && @category != "" 
          @fill = "true" # need to fill leaderboard_list if so 
            
          # if "All Categories" is chosen, get all videos on the site ranked by points, and get the values of all the leaderboard names 
          if @category == "All Categories"
          @videos = Video.order("points DESC")
          @string = ""
              @leaderboard_list.each do |l|                   # converts array to delimited string 
              @string = @string + l[0] + "|"
              end
          # otherwise find what category is chosen and get the videos for that category, along with the leaderboards in that category 
          else
          @obj = Category.find_by_category_name(@category)
          @videos = Video.find_in_cat(@obj.id).order("points DESC")
          @leaderboards = @obj.leaderboards
             
             if @leaderboards.empty? # if no leaderboards exist for that category, make an empty array 
             @leaderboards = [""]
             else 
             @leaderboards = @leaderboards.collect{|l| [l.leaderboard_name]} # if leaderboards do exist, get the names of all the leaderboards 
             @leaderboards.unshift(["All Leaderboards"])   # add "All Leaderboards" to the list of names 
             @string = "" 		                   # convert the list of name arrays to delimited string for javascript 
                 @leaderboards.each do |l|
                 @string = @string + l[0] + "|"
                 end
       	     end 
          end
      else 
          @category = "All Categories"
          @leaderboard = "All Leaderboards"
      end

      @user_list = User.order("points DESC").where(:hasVideo => true)
      @new = false 


      @category_list = Category.all.collect{|c| [c.category_name]}
      @category_list.unshift(["All Categories"])

  respond_to do |format|
     format.js{}
     format.html{}
  end 
     
end
  
def check_email
 
    @user= User.find_by_email(params[:user][:email])
    respond_to do |format|
      format.json{render :json => !@user}
    end
     
end
  
def check_name
   @user= User.find_by_name(params[:user][:name])

   respond_to do |format|
     format.json{render :json => !@user}
   end
end
  
def select_user
 
 if params[:user] != nil
   @selected_user = User.find(params[:user])
 else
  @users = User.where(:hasVideo => true).order("points DESC")
  num = params[:number].to_i
  @selected_user = @users[num]
 end

 respond_to do |format|
    format.js{}
 end

end


end
